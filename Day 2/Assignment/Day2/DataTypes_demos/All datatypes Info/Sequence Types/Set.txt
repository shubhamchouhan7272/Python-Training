# Example of set , order is not fixed and duplicates are not allowed
## sets are mutable


myset= {10,20,30,40,20}
print(myset)
print(type(myset))


# set can also be created in this way using set() constructor

myset = set([1, 2, 3, 4, 5])



-------------------------------------------------
## Adding elements in a set :

(1) Using add() Method:
	The add() method adds a single element to the set.
	my_set = {1, 2, 3}
	my_set.add(4)

(2) Using update() Method:
	The update() method is used to add multiple elements to the set. It takes an iterable (e.g., a list, tuple, or another set) as an argument.
	my_set = {1, 2, 3}
	my_set.update([3, 4, 5, 6])

(3) Using union() Method:
	The union() method returns a new set containing the union of two sets.
	set1 = {1, 2, 3}
	set2 = {3, 4, 5}
	result_set = set1.union(set2)

(4) Using Set Comprehension:
	You can use set comprehension to create a new set based on a condition.
	my_set = {1, 2, 3}
	new_elements = {x * 2 for x in my_set}
----------------------------------------------------------------------------


## Removing elements from a list :

(1) remove() Method:
	The remove() method removes a specified element from the set. If the element is not present, it raises a KeyError.
	my_set = {1, 2, 3, 4}
	my_set.remove(3)

(2) discard() Method:
	The discard() method removes a specified element from the set. If the element is not present, it does nothing and doesn't raise an error.
	my_set = {1, 2, 3, 4}
	my_set.discard(3)

(3) pop() Method:
	The pop() method removes and returns an arbitrary element from the set. If the set is empty, it raises a KeyError.
	my_set = {1, 2, 3, 4}
	popped_element = my_set.pop()

(4) clear() Method:
	The clear() method removes all elements from the set, leaving an empty set.
	my_set = {1, 2, 3, 4}
	my_set.clear()

(5) Using Set Comprehension:
	You can use set comprehension to create a new set without specific elements.
	my_set = {1, 2, 3, 4}
	my_set = {x for x in my_set if x != 3}





