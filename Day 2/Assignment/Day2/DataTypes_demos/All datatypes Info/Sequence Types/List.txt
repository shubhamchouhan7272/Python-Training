# Example of list

mylist= [10,20,30,40]
print(mylist)
print(type(mylist))


## Adding elements to a list 
-----------------------------
(1) Append Method :
	The append() method adds a single element to the end of the list.
	my_list = [1, 2, 3]
	my_list.append(4)

(2) Insert() :
	The insert() method allows you to add an element at a specific index in the list.
	my_list = [1, 2, 3]
	my_list.insert(1, 4)  # Adds 4 at index 1

(3) Extend Method:
	 The extend() method is used to add multiple elements from an iterable (e.g., list, tuple) to the end of the list.

	my_list = [1, 2, 3]
	my_list.extend([4, 5, 6])

(4) Concatenation (+ Operator):
	You can use the + operator to concatenate two lists, effectively adding elements from one list to another.

	list1 = [1, 2, 3]
	list2 = [4, 5, 6]
	combined_list = list1 + list2

(5) List Comprehension:
	List comprehension allows you to create a new list by specifying the elements to be added based on a condition.

	my_list = [1, 2, 3]
	new_elements = [4, 5, 6]
	my_list = [item for item in my_list] + new_elements

(6) Using * Operator:
	The * operator can be used to repeat elements and add them to the list.
	my_list = [1, 2, 3]
	my_list += [4] * 3  # Adds three 4s to the list

(7) Using += Operator:
	The += operator is a shorthand for list concatenation and is used to add elements to the existing list.
	my_list = [1, 2, 3]
	my_list += [4, 5, 6]

-------------------------------------------------------------------
# Updating element in a list :

(1) Using Indexing:
	my_list = [1, 2, 3, 4, 5]
	my_list[2] = 99  # Updates the element at index 2 to 99

(2) Slice Assignment:
	You can use slice assignment to update multiple elements within a specified range.
	my_list = [1, 2, 3, 4, 5]
	my_list[1:4] = [10, 20, 30]  # Updates elements at indices 1, 2, and 3

(3) List Comprehension:
	List comprehension allows you to create a new list by specifying the elements to be updated based on a condition.
	my_list = [1, 2, 3, 4, 5]
	my_list = [x * 2 if x % 2 == 0 else x for x in my_list]  # Doubles even elements

(4) Using List Methods:
	Some list methods can be used to modify elements. For example, the pop() method can remove and return an element at a specific index, allowing you to update the list.
	my_list = [1, 2, 3, 4, 5]
	removed_element = my_list.pop(2)  # Removes and returns the element at index 2
	my_list.insert(2, 99)  # Inserts 99 at index 2

(5) Using Iteration:
	You can iterate through the list and update elements based on a condition.
	my_list = [1, 2, 3, 4, 5]
	for i in range(len(my_list)):
    		my_list[i] *= 2  # Doubles each element

-------------------------------------------------------------------------
## Removing elements from a list:
(1) remove() Method:
	my_list = [1, 2, 3, 4, 2, 5]
	my_list.remove(2)  # Removes the first occurrence of 2

(2) pop() Method:
	The pop() method removes and returns the element at the specified index. If no index is provided, it removes and returns the last element.
	my_list = [1, 2, 3, 4, 5]
	removed_element = my_list.pop(2)  # Removes the element at index 2

(3) del Statement:
	The del statement can be used to remove elements or slices from a list using indexing.
	my_list = [1, 2, 3, 4, 5]
	del my_list[2]  # Removes the element at index 2

(4) clear() Method:
	The clear() method removes all elements from the list, leaving an empty list.
	my_list = [1, 2, 3, 4, 5]
	my_list.clear()  # Removes all elements from the list

(5) List Comprehension:
	You can use list comprehension to create a new list without specific elements.
	my_list = [1, 2, 3, 4, 5]
	my_list = [x for x in my_list if x != 3]  # Removes the element 3

(6) Filter and Lambda:
	The filter() function combined with a lambda expression can be used to filter out specific elements.
	my_list = [1, 2, 3, 4, 5]
	my_list = list(filter(lambda x: x != 3, my_list))  # Removes the element 3

(7) Using Slicing:
	You can use slicing to create a new list without specific elements.
	my_list = [1, 2, 3, 4, 5]
	my_list = my_list[:2] + my_list[3:]  # Removes the element at index 2

 






















