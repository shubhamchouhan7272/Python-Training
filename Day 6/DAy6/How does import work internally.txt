suppose we say:
	import First
[ First is a module name here]

Python executes the "import" statement. It first checks in the system cache of already loaded modules. This cache is just a dictionary with the module name as keys and module object (its address) as values. So, in our case "First" is a key and "address of module object" is a value.
if the module is present (its address) in this cache, it's returned immediately. If not, Python's import protocol is invoked involving  "finders" and "loaders". The "loader" creates the module object in the memory (heap). Then an entry is added to the system cache.
The "sys.modules" is the dictionary (it represents system cache) that maps the module names to modules that have already been loaded.
Then in our current module's namespace , we get the name "First" as a reference to the module object.

What if you delete the module by saying:
	del First

It simply removes the reference from your global namespace. It doesn't delete the module object.
now if you import the module again
	import First
module object is not created rather a new reference "First" is created which refers to the module object.




