--create table with multiple unique keys
---------------------------------------------
--below table has two unique keys - one on c1 and second on c2
create table t_uk_multi(c1 int unique,c2 int unique,c3 varchar(100));


--primary key
-----------------
create table t_pk(id int primary key,name varchar(100));
insert into t_pk values(1,'a');--> works
insert into t_pk values(1,'b');--> fails
insert into t_pk values(null,'c');--> fails


--composite primary key
---------------------------
create table t_pk_comp(c1 int,c2 int,c3 varchar(100),primary key(c1,c2));

--multiple primary key :
-------------------------
create table t_pk_multi(c1 int primary key, c2 int primary key, c3 varchar(100));---> fails (Multiple primary key defined).

--add unique key to t1 existing table
alter table t1 add unique(c1);-----> fails if c1 already has duplicate records.

--not null constraint :
create table t_nn (id int not null,name varchar(100));
insert into t_nn values(null,'a');---> fails (Column 'id' cannot be null)
insert into t_nn(name) values('a');---> fails (Field 'id' doesn't have a default value)


--Check constraints :
-----------------------------
create table t_cc(id int,salary int check(salary>0));

insert into t_cc values(1,-10);---> fails (Check constraint 't_cc_chk_1' is violated.)

insert into t_cc values(1,10);---> works

create table t_cc2(id int,gender varchar(100) check(gender in('Male','Female')));

insert into t_cc2 values(1,'Male');-----> works
insert into t_cc2 values(1,'xyz');------> fails ( Check constraint 't_cc2_chk_1' is violated.)

=====================================================================
Note : Integrity of data ===> means correctness or completeness.
=========================================================================

--foriegn key / refrential integrity constraint / parent child relationship
-----------------------------------------------------------------------------


1. create parent table :
-----------------------------
create table t_parent (deptid int primary key,deptname varchar(100));

create table t_child (eid int,ename varchar(100),deptid int, foreign key(deptid) references t_parent(deptid));

insert into t_child values (1,'a',1);---> fails as deptid 1 is not present in t_parent
insert into t_parent values(1,'HR');----> works

insert into t_child values(1,'a',1);---> works as deptid 1 is now present in t_parent.

insert into t_child values(1,'a',null);----> works as null is allowed in the child as deptid is not define as not null column.


--composite foreign key :
================================
--for composite foreign key you need to first create a table with either a composite unique or primary key

create table t_parent_comp(c1 int, c2 int,c3 varchar(100), unique(c1,c2));

create table t_child_comp(c1 int, c2 int, c4 varchar(100),foreign key(c1,c2) references t_parent_comp(c1,c2));

insert into t_child_comp values(1,1,'a');----> fails

insert into t_parent_comp values(1,1,'a');---> works


insert into t_child_comp values(1,1,'a');----> works

--default constraints :
-------------------------
defines what value the column will take if explicit value for the columns is not provided while inserting the data

create table t_def(id int, salary int default 1000);

insert into t_def(id) values(1);

insert into t_def(id,salary) values(1,2000);

insert into t_def(id,salary) values(1,null);
